{"ast":null,"code":"import { createActions } from 'redux-actions';\n// pour un action réalise un side-effect comme appeller API, il y a 3 actions:\n// envoyer une requete \n// quand avec success\n// quand erreur\n\nexport const getType = reduxAction => {\n  return reduxAction().type;\n};\n\n// quand on crée la méthode createActions dans redux/actions, chaque action est une fonction retourne une valeur est un objet\nexport const getPosts = createActions({\n  getPostsRequest: undefined,\n  getPostsSuccess: payload => payload,\n  getPostsFailure: err => err\n});\nexport const createPost = createActions({\n  createPostRequest: payload => payload,\n  createPostSuccess: payload => payload,\n  createPostFailure: err => err\n});\nexport const updatePost = createActions({\n  updatePostRequest: payload => payload,\n  updatePostSuccess: payload => payload,\n  updatePostFailure: err => err\n});\n\n// action pour show model quand on clique sur le bouton + pour creer new post\nexport const modal = createActions({\n  showModal: payload => payload,\n  hideModal: payload => payload\n});\nexport { authAction } from './auth';\n\n/*\r\n    getType(getPosts.getPostSuccess)\r\n    =>\r\n    {\r\n        type: 'getPostSuccess',\r\n        payload: {\r\n            name: 'Test'\r\n        }\r\n    }\r\n*/","map":{"version":3,"names":["createActions","getType","reduxAction","type","getPosts","getPostsRequest","undefined","getPostsSuccess","payload","getPostsFailure","err","createPost","createPostRequest","createPostSuccess","createPostFailure","updatePost","updatePostRequest","updatePostSuccess","updatePostFailure","modal","showModal","hideModal","authAction"],"sources":["C:/WEB/WEB_APPLICATION_MASTER/client/src/redux/actions/index.js"],"sourcesContent":["import { createActions} from 'redux-actions';\r\n// pour un action réalise un side-effect comme appeller API, il y a 3 actions:\r\n// envoyer une requete \r\n// quand avec success\r\n// quand erreur\r\n\r\n\r\nexport const getType = (reduxAction) => {\r\n    return reduxAction().type;\r\n}\r\n\r\n\r\n// quand on crée la méthode createActions dans redux/actions, chaque action est une fonction retourne une valeur est un objet\r\nexport const getPosts = createActions({\r\n    getPostsRequest : undefined,\r\n    getPostsSuccess: (payload) => payload,\r\n    getPostsFailure: (err) => err,\r\n});\r\n\r\nexport const createPost = createActions({\r\n    createPostRequest : (payload) => payload,\r\n    createPostSuccess: (payload) => payload,\r\n    createPostFailure: (err) => err,\r\n});\r\n\r\nexport const updatePost = createActions({\r\n    updatePostRequest : (payload) => payload,\r\n    updatePostSuccess: (payload) => payload,\r\n    updatePostFailure: (err) => err,\r\n});\r\n\r\n// action pour show model quand on clique sur le bouton + pour creer new post\r\nexport const modal = createActions({\r\n    showModal : (payload) => payload,\r\n    hideModal: (payload) => payload,\r\n});\r\n\r\nexport {authAction} from './auth';\r\n\r\n\r\n\r\n/*\r\n    getType(getPosts.getPostSuccess)\r\n    =>\r\n    {\r\n        type: 'getPostSuccess',\r\n        payload: {\r\n            name: 'Test'\r\n        }\r\n    }\r\n*/"],"mappings":"AAAA,SAASA,aAAa,QAAO,eAAe;AAC5C;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,OAAO,GAAIC,WAAW,IAAK;EACpC,OAAOA,WAAW,CAAC,CAAC,CAACC,IAAI;AAC7B,CAAC;;AAGD;AACA,OAAO,MAAMC,QAAQ,GAAGJ,aAAa,CAAC;EAClCK,eAAe,EAAGC,SAAS;EAC3BC,eAAe,EAAGC,OAAO,IAAKA,OAAO;EACrCC,eAAe,EAAGC,GAAG,IAAKA;AAC9B,CAAC,CAAC;AAEF,OAAO,MAAMC,UAAU,GAAGX,aAAa,CAAC;EACpCY,iBAAiB,EAAIJ,OAAO,IAAKA,OAAO;EACxCK,iBAAiB,EAAGL,OAAO,IAAKA,OAAO;EACvCM,iBAAiB,EAAGJ,GAAG,IAAKA;AAChC,CAAC,CAAC;AAEF,OAAO,MAAMK,UAAU,GAAGf,aAAa,CAAC;EACpCgB,iBAAiB,EAAIR,OAAO,IAAKA,OAAO;EACxCS,iBAAiB,EAAGT,OAAO,IAAKA,OAAO;EACvCU,iBAAiB,EAAGR,GAAG,IAAKA;AAChC,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMS,KAAK,GAAGnB,aAAa,CAAC;EAC/BoB,SAAS,EAAIZ,OAAO,IAAKA,OAAO;EAChCa,SAAS,EAAGb,OAAO,IAAKA;AAC5B,CAAC,CAAC;AAEF,SAAQc,UAAU,QAAO,QAAQ;;AAIjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}