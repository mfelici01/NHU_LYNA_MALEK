{"ast":null,"code":"import { takeLatest, call, put } from \"redux-saga/effects\";\nimport * as actions from \"../actions\";\nimport * as api from \"../../api\";\n\n// generator fct quand il y a un action a lieu\nfunction* fetchPostsSaga(action) {\n  try {\n    const posts = yield call(api.fetchPosts);\n    console.log(\"[posts]\", posts);\n    //trigger action\n    yield put(actions.getPosts.getPostsSuccess(posts.data));\n  } catch (err) {\n    console.error(err);\n    yield put(actions.getPosts.getPostsFailure(err));\n  }\n}\nfunction* createPostSaga(action) {\n  try {\n    const post = yield call(api.createPost, action.payload);\n    yield put(actions.createPost.createPostSuccess(post.data));\n  } catch (err) {\n    yield put(actions.createPost.createPostFailure(err));\n  }\n}\nfunction* updatePostSaga(action) {\n  try {\n    console.log(\"updatePostSaga\", {\n      action\n    });\n    const updatedPost = yield call(api.updatePost, action.payload);\n    console.log(\"[updatePostSaga - post]\", updatedPost);\n    //trigger action\n    yield put(actions.updatePost.updatePostSuccess(updatedPost.data));\n  } catch (err) {\n    console.error(err);\n    yield put(actions.updatePost.updatePostFailure(err));\n  }\n}\nfunction* postSaga() {\n  yield takeLatest(actions.getPosts.getPostsRequest, fetchPostsSaga);\n  yield takeLatest(actions.createPost.createPostRequest, createPostSaga);\n  yield takeLatest(actions.updatePost.updatePostRequest, updatePostSaga);\n}\nexport default postSaga;","map":{"version":3,"names":["takeLatest","call","put","actions","api","fetchPostsSaga","action","posts","fetchPosts","console","log","getPosts","getPostsSuccess","data","err","error","getPostsFailure","createPostSaga","post","createPost","payload","createPostSuccess","createPostFailure","updatePostSaga","updatedPost","updatePost","updatePostSuccess","updatePostFailure","postSaga","getPostsRequest","createPostRequest","updatePostRequest"],"sources":["C:/WEB/WEB_APPLICATION_MASTER/client/src/redux/sagas/post.saga.js"],"sourcesContent":["import { takeLatest, call, put } from \"redux-saga/effects\";\nimport * as actions from \"../actions\";\nimport * as api from \"../../api\";\n\n// generator fct quand il y a un action a lieu\nfunction* fetchPostsSaga(action) {\n\n    \n    try {\n        const posts = yield call(api.fetchPosts);\n        console.log(\"[posts]\", posts);\n        //trigger action\n        yield put(actions.getPosts.getPostsSuccess(posts.data));\n    } catch (err) {\n        console.error(err);\n        yield put(actions.getPosts.getPostsFailure(err));\n    }\n}\n\nfunction* createPostSaga(action) {\n    try {\n        const post = yield call(api.createPost, action.payload);\n        yield put(actions.createPost.createPostSuccess(post.data));\n    } catch (err) {\n        yield put(actions.createPost.createPostFailure(err));\n    }\n}\n\nfunction* updatePostSaga(action) {\n    try {\n        console.log(\"updatePostSaga\", { action });\n        const updatedPost = yield call(api.updatePost, action.payload);\n        console.log(\"[updatePostSaga - post]\", updatedPost);\n        //trigger action\n        yield put(actions.updatePost.updatePostSuccess(updatedPost.data));\n    } catch (err) {\n        console.error(err);\n        yield put(actions.updatePost.updatePostFailure(err));\n    }\n}\n\nfunction* postSaga() {\n    yield takeLatest(actions.getPosts.getPostsRequest, fetchPostsSaga);\n    yield takeLatest(actions.createPost.createPostRequest, createPostSaga);\n    yield takeLatest(actions.updatePost.updatePostRequest, updatePostSaga);\n}\n\nexport default postSaga;"],"mappings":"AAAA,SAASA,UAAU,EAAEC,IAAI,EAAEC,GAAG,QAAQ,oBAAoB;AAC1D,OAAO,KAAKC,OAAO,MAAM,YAAY;AACrC,OAAO,KAAKC,GAAG,MAAM,WAAW;;AAEhC;AACA,UAAUC,cAAcA,CAACC,MAAM,EAAE;EAG7B,IAAI;IACA,MAAMC,KAAK,GAAG,MAAMN,IAAI,CAACG,GAAG,CAACI,UAAU,CAAC;IACxCC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEH,KAAK,CAAC;IAC7B;IACA,MAAML,GAAG,CAACC,OAAO,CAACQ,QAAQ,CAACC,eAAe,CAACL,KAAK,CAACM,IAAI,CAAC,CAAC;EAC3D,CAAC,CAAC,OAAOC,GAAG,EAAE;IACVL,OAAO,CAACM,KAAK,CAACD,GAAG,CAAC;IAClB,MAAMZ,GAAG,CAACC,OAAO,CAACQ,QAAQ,CAACK,eAAe,CAACF,GAAG,CAAC,CAAC;EACpD;AACJ;AAEA,UAAUG,cAAcA,CAACX,MAAM,EAAE;EAC7B,IAAI;IACA,MAAMY,IAAI,GAAG,MAAMjB,IAAI,CAACG,GAAG,CAACe,UAAU,EAAEb,MAAM,CAACc,OAAO,CAAC;IACvD,MAAMlB,GAAG,CAACC,OAAO,CAACgB,UAAU,CAACE,iBAAiB,CAACH,IAAI,CAACL,IAAI,CAAC,CAAC;EAC9D,CAAC,CAAC,OAAOC,GAAG,EAAE;IACV,MAAMZ,GAAG,CAACC,OAAO,CAACgB,UAAU,CAACG,iBAAiB,CAACR,GAAG,CAAC,CAAC;EACxD;AACJ;AAEA,UAAUS,cAAcA,CAACjB,MAAM,EAAE;EAC7B,IAAI;IACAG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE;MAAEJ;IAAO,CAAC,CAAC;IACzC,MAAMkB,WAAW,GAAG,MAAMvB,IAAI,CAACG,GAAG,CAACqB,UAAU,EAAEnB,MAAM,CAACc,OAAO,CAAC;IAC9DX,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEc,WAAW,CAAC;IACnD;IACA,MAAMtB,GAAG,CAACC,OAAO,CAACsB,UAAU,CAACC,iBAAiB,CAACF,WAAW,CAACX,IAAI,CAAC,CAAC;EACrE,CAAC,CAAC,OAAOC,GAAG,EAAE;IACVL,OAAO,CAACM,KAAK,CAACD,GAAG,CAAC;IAClB,MAAMZ,GAAG,CAACC,OAAO,CAACsB,UAAU,CAACE,iBAAiB,CAACb,GAAG,CAAC,CAAC;EACxD;AACJ;AAEA,UAAUc,QAAQA,CAAA,EAAG;EACjB,MAAM5B,UAAU,CAACG,OAAO,CAACQ,QAAQ,CAACkB,eAAe,EAAExB,cAAc,CAAC;EAClE,MAAML,UAAU,CAACG,OAAO,CAACgB,UAAU,CAACW,iBAAiB,EAAEb,cAAc,CAAC;EACtE,MAAMjB,UAAU,CAACG,OAAO,CAACsB,UAAU,CAACM,iBAAiB,EAAER,cAAc,CAAC;AAC1E;AAEA,eAAeK,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}